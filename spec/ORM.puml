@startuml
class Model {
  {static} + joinTablePrefix
  {static} + tableName
  {static} + fields : Map
  {static} + hasMany : []
  {static} + belongsTo : Map
  {static} + belongsToMany : Set
---
  {static} + database
---
  + id
  + uuid
  + created_at
  + updated_at

  + dynamic fields

  - columns
---
  +getColumns()
  +getStates()

  +read()
  +write()
  +delete()

  +snapshot()
  +eagerLoad()
  +writeRetry()

  +parent(fk)
  +children(fk)
  +siblings(MClass)
  +add(model)
  +remove(model)
  +removeAll(MClass)
}

note right of Model::getColumns
?? for Database adapter orm
end note

note right of Model::snapshot
for ORMWrite, ORMDelete
end note

class ORM {
{static} +defaultAdapter
{static} +classPrefix
---
  {static} + import(modelName, defaultMClass)
---
  << Create >>
  {static} + create(MClass, opt)
  {static} + insertAll(MClass, columns, values, opts)
---
  << Read (All, By, With) >>
  {static} + factory(MClass, id, opt)
  {static} + readAll(MClass, opt)
  {static} + readBy(MClass, key, values, opt)
  {static} + readWith(MClass, criteria, opt)
---
  {static} + countAll(MClass, opt)
  {static} + countBy(MClass, key, values, opt)
  {static} + countWith(MClass, criteria, opt)
---
  << Update (All, By, With) >>
  {static} + updateAll(MClass, kv, columnValues, opt)
  {static} + updateBy(MClass, key, values, columnValues, opt)
  {static} + updateWith(MClass, criteria, columnValues, opt)
---
  << Delete (All, By, With) >>
  {static} + deleteAll(MClass, opt)
  {static} + deleteBy(MClass, key, values, opt)
  {static} + deleteWith(MClass, criteria, opt)
}

note right of ORM::factory
alias of ORM.readBy(MClass, 'id', [id], opt)
end note
@enduml